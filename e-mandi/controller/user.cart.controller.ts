import { cartModel,productModel } from '../model'; 
export const addToCart=async (quantity:string,id:string):Promise<void>=>{


Farmers and Streamlining Agricultural Commerce This document outlines the development of an online marketplace, D-Mandi Store, aimed at creating a transparent and efficient platform for agricultural commerce. The platform will bridge the gap between farmers and the market, ensuring fair compensation for farmers and competitive prices for buyers. Users of the System Admin User (farmer, whole seller, retailer, civilian) Customer Functional Requirements Build an application that customers can access and purchase vegetables online. The application should have signup, login, profile, dashboard page, and product page. Maintain a database for customer information, order information, and product portfolio. Integrated platform for admin and customer. Administration module to include options for adding/modifying/removing the existing product(s) and customer management. Users can order only if the stock quantity is available. Project Tasks API Endpoints USER Action URL Method Response Login POST User object Signup POST Success/Failure message Get All Products GET List of products Add to cart POST Updated cart Cart Items GET List of cart items Delete cart item DELETE Updated cart Cart to Orders POST Order confirmation Orders list GET List of orders Place order directly POST Order confirmation ADMIN Action Response Get All Products List of products Add Product Product added confirmation Delete Product Product deleted confirmation Product Edit Updated product Backend Model Layer UserModel LoginModel ProductModel CartModel OrderModel Controller Layer SignupController LoginController ProductController CartController OrderController Class and Method Diagram UserModel email: String password: String username: String mobileNumber: String active: Boolean role: String cart: CartModel ordersList: List<OrderModel> LoginModel email: String password: String ProductModel productId: String imageUrl: String productName: String price: String description: String quantity: String CartModel cartItemId: String user: UserModel productName: String quantity: int price: String OrderModel orderId: String user: UserModel productName: String quantity: int totalPrice: String status: String Controller Layer SignupController saveUser(UserModel user): This method helps to store users in the database and return true or false based on the database transaction. LoginController checkUserLogin(LoginModel data): This method helps the user to sign up or the application and must return true or false. ProductController List<ProductModel> getProduct(): This method helps the admin to fetch all products from the database. List<ProductModel> getHomeProduct(): This method helps to retrieve all the products from the database. ProductModel productEditData(String id): This method helps to retrieve a product from the database based on the product id. productEditSave(ProductModel data): This method helps to edit a product and save it to the database. productSave(ProductModel data): This method helps to add a new product to the database. productDelete(String id): This method helps to delete a product from the database. CartController addToCart(String Quantity, String id): This method helps the customer to add the product to the cart. List<CartTempModel> showCart(String id): This method helps to view the cart items. deleteCartItem(String id): This method helps to delete a product from the cart. OrderController List<OrderTemp> getUserProducts(String id): This method helps to list the orders based on the user id. saveProduct(String id): This method helps to save the cart items as an order.
    try{
const existingCartItem =




    }
    catch(error)
    {

    }
}